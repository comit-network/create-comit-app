version: 2.1
workflows:
  version: 2
  main:
    jobs:
      - check-format
      - build
      - test:
          requires:
            - build

jobs:
  check-format:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - install_rust
      - run:
          name:  "Install format crates Rust"
          command: |
            rustup component add rustfmt
            cargo install cargo-tomlfmt
      - run:
          name: "Run Git hooks"
          command: |
            source $HOME/.cargo/env
            sh ./.githooks/pre-commit
  build:
    working_directory: ~/workspace
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - install_rust
      - install_sccache
      - restore_sccache_cache
      - run:
          name: "Build"
          command: |
            cargo build
      - run:
          name: "Install Clippy"
          command: rustup component add clippy
      - run:
          name: "Clippy"
          command: |
            cargo clippy
      - save_sccache_cache
      - store_artifacts:
          path: ./target/
  test:
    working_directory: ~/workspace
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - install_rust
      - attach_workspace:
          at: ./target
      - run:
          name: "Test"
          command: |
            cargo test

commands:
  install_rust:
    steps:
      - run:
          name: "Install Rust"
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(< rust-toolchain)
            source $HOME/.cargo/env
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
            rustc --version --verbose
            cargo --version --verbose
  install_sccache:
    steps:
      - run:
          name: "Install sccache"
          command: |
            cargo install sccache
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore_sccache_cache:
    steps:
      - restore_cache:
          name: "Restore sccache cache"
          key: sccache-cache-${< rust-toolchain>}-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save_sccache_cache:
    steps:
      - save_cache:
          name: "Save sccache cache"
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-${< rust-toolchain>}-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
