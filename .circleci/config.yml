version: 2.1
workflows:
  version: 2
  main:
    jobs:
      - static_analysis:
          filters: # ignore .tmp branches from bors
            branches:
              ignore: /^(staging.tmp|trying.tmp)$/
      - build_test:
          filters: # ignore .tmp branches from bors
            branches:
              ignore: /^(staging.tmp|trying.tmp)$/

jobs:
  static_analysis:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - restore_caches
      - install_rust
      - run:
          name: "Run Format checks"
          command: |
            make check_format
      - run:
          name: "Run Clippy"
          command: make clippy
  build_test:
    working_directory: ~/workspace
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - restore_caches
      - install_rust
      - run:
          name: "Build"
          command: |
            make build
      - run:
          name: "Test"
          command: |
            make test
      - install_node
      - run:
          name: "End-to-end Test"
          command: |
            make e2e
      - save_caches

commands:
  install_rust:
    steps:
      - run:
          name: "Install Rust"
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(< rust-toolchain)
            source $HOME/.cargo/env
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
            rustc --version --verbose
            cargo --version --verbose
  install_node:
    steps:
      - run:
          name:  "Install node"
          command: |
            rm -rf /opt/circleci/.nvm
            sudo systemctl stop apt-daily.service
            sudo systemctl kill --kill-who=all apt-daily.service
            # wait until `apt-get updated` has been killed
            while ! (sudo systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)') ; do sleep 1; done
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            curl -sL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            echo "deb https://deb.nodesource.com/node_10.x/ trusty main" | sudo tee /etc/apt/sources.list.d/node_10.list
            sudo apt-get update
            sudo apt-get install -y nodejs=10.* yarn
  restore_caches:
    steps:
      - restore_cache:
          name: "Restore Rustup cache"
          keys:
            - rustup-{{ checksum "rust-toolchain" }}
            # We don't want multiple toolchains to pile up in our cache, so only restore the ones we actually use.
      - restore_cache:
          name: "Restore Cargo cache"
          keys:
            - cargo-{{ .Branch }}
            - cargo
      - restore_cache:
          name: "Restore Target folder cache"
          keys:
            - target-folder-{{ checksum "Cargo.lock" }}
            # We don't want the target folder to blow up over time, hence we only download the cache if it exactly matches `Cargo.lock`
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "new_project/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
  save_caches:
    steps:
      - save_cache:
          name: "Cache Rustup"
          paths:
            - ~/.rustup
          key: rustup-{{ checksum "rust-toolchain" }}
      - save_cache:
          name: "Cache Cargo"
          paths:
            - ~/.cargo
          key: cargo-{{ .Branch }}
      - save_cache:
          name: "Cache Target folder"
          key: target-folder-{{ checksum "Cargo.lock" }}
          paths:
            - "./target"
      - save_cache:
          paths:
            - ~/.cache/yarn
            - new_project/examples/btc-eth/node_modules
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "new_project/yarn.lock" }}
